import{LinearFilter,Sprite,SpriteMaterial,Texture}from"three";const three="undefined"!=typeof window&&window.THREE?window.THREE:{LinearFilter:LinearFilter,Sprite:Sprite,SpriteMaterial:SpriteMaterial,Texture:Texture};export default class extends three.Sprite{constructor(t="",e=10,i="rgba(255, 255, 255, 1)"){super(new three.SpriteMaterial),this._text=`${t}`,this._textHeight=e,this._color=i,this._backgroundColor=!1,this._padding=0,this._borderWidth=0,this._borderRadius=0,this._borderColor="white",this._strokeWidth=0,this._strokeColor="white",this._fontFace="system-ui",this._fontSize=90,this._fontWeight="normal",this._canvas=document.createElement("canvas"),this._genCanvas()}get text(){return this._text}set text(t){this._text=t,this._genCanvas()}get textHeight(){return this._textHeight}set textHeight(t){this._textHeight=t,this._genCanvas()}get color(){return this._color}set color(t){this._color=t,this._genCanvas()}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this._genCanvas()}get padding(){return this._padding}set padding(t){this._padding=t,this._genCanvas()}get borderWidth(){return this._borderWidth}set borderWidth(t){this._borderWidth=t,this._genCanvas()}get borderRadius(){return this._borderRadius}set borderRadius(t){this._borderRadius=t,this._genCanvas()}get borderColor(){return this._borderColor}set borderColor(t){this._borderColor=t,this._genCanvas()}get fontFace(){return this._fontFace}set fontFace(t){this._fontFace=t,this._genCanvas()}get fontSize(){return this._fontSize}set fontSize(t){this._fontSize=t,this._genCanvas()}get fontWeight(){return this._fontWeight}set fontWeight(t){this._fontWeight=t,this._genCanvas()}get strokeWidth(){return this._strokeWidth}set strokeWidth(t){this._strokeWidth=t,this._genCanvas()}get strokeColor(){return this._strokeColor}set strokeColor(t){this._strokeColor=t,this._genCanvas()}_genCanvas(){const t=this._canvas,e=t.getContext("2d"),i=Array.isArray(this.borderWidth)?this.borderWidth:[this.borderWidth,this.borderWidth],r=i.map((t=>t*this.fontSize*.1)),h=(Array.isArray(this.borderRadius)?this.borderRadius:[this.borderRadius,this.borderRadius,this.borderRadius,this.borderRadius]).map((t=>t*this.fontSize*.1)),o=Array.isArray(this.padding)?this.padding:[this.padding,this.padding],s=o.map((t=>t*this.fontSize*.1)),n=this.text.split("\n"),a=`${this.fontWeight} ${this.fontSize}px ${this.fontFace}`;e.font=a;const d=Math.max(...n.map((t=>e.measureText(t).width))),g=this.fontSize*n.length;if(t.width=d+2*r[0]+2*s[0],t.height=g+2*r[1]+2*s[1],this.borderWidth){if(e.strokeStyle=this.borderColor,r[0]){const i=r[0]/2;e.lineWidth=r[0],e.beginPath(),e.moveTo(i,h[0]),e.lineTo(i,t.height-h[3]),e.moveTo(t.width-i,h[1]),e.lineTo(t.width-i,t.height-h[2]),e.stroke()}if(r[1]){const i=r[1]/2;e.lineWidth=r[1],e.beginPath(),e.moveTo(Math.max(r[0],h[0]),i),e.lineTo(t.width-Math.max(r[0],h[1]),i),e.moveTo(Math.max(r[0],h[3]),t.height-i),e.lineTo(t.width-Math.max(r[0],h[2]),t.height-i),e.stroke()}if(this.borderRadius){const i=Math.max(...r),o=i/2;e.lineWidth=i,e.beginPath(),[!!h[0]&&[h[0],o,o,h[0]],!!h[1]&&[t.width-h[1],t.width-o,o,h[1]],!!h[2]&&[t.width-h[2],t.width-o,t.height-o,t.height-h[2]],!!h[3]&&[h[3],o,t.height-o,t.height-h[3]]].filter((t=>t)).forEach((([t,i,r,h])=>{e.moveTo(t,r),e.quadraticCurveTo(i,r,i,h)})),e.stroke()}}this.backgroundColor&&(e.fillStyle=this.backgroundColor,this.borderRadius?(e.beginPath(),e.moveTo(r[0],h[0]),[[r[0],h[0],t.width-h[1],r[1],r[1],r[1]],[t.width-r[0],t.width-r[0],t.width-r[0],r[1],h[1],t.height-h[2]],[t.width-r[0],t.width-h[2],h[3],t.height-r[1],t.height-r[1],t.height-r[1]],[r[0],r[0],r[0],t.height-r[1],t.height-h[3],h[0]]].forEach((([t,i,r,h,o,s])=>{e.quadraticCurveTo(t,h,i,o),e.lineTo(r,s)})),e.closePath(),e.fill()):e.fillRect(r[0],r[1],t.width-2*r[0],t.height-2*r[1])),e.translate(...r),e.translate(...s),e.font=a,e.fillStyle=this.color,e.textBaseline="bottom";const l=this.strokeWidth>0;l&&(e.lineWidth=this.strokeWidth*this.fontSize/10,e.strokeStyle=this.strokeColor),n.forEach(((t,i)=>{const r=(d-e.measureText(t).width)/2,h=(i+1)*this.fontSize;l&&e.strokeText(t,r,h),e.fillText(t,r,h)})),this.material.map&&this.material.map.dispose();const c=this.material.map=new three.Texture(t);c.minFilter=three.LinearFilter,c.needsUpdate=!0;const _=this.textHeight*n.length+2*i[1]+2*o[1];this.scale.set(_*t.width/t.height,_,0)}clone(){return new this.constructor(this.text,this.textHeight,this.color).copy(this)}copy(t){return three.Sprite.prototype.copy.call(this,t),this.color=t.color,this.backgroundColor=t.backgroundColor,this.padding=t.padding,this.borderWidth=t.borderWidth,this.borderColor=t.borderColor,this.fontFace=t.fontFace,this.fontSize=t.fontSize,this.fontWeight=t.fontWeight,this.strokeWidth=t.strokeWidth,this.strokeColor=t.strokeColor,this}}
